package zi.leet.hard;

import java.util.*;

//https://leetcode.com/problems/minimize-malware-spread-ii
public class MinimumMalwareSpreadTwo {
    class DSU {
        int[] parent;

        DSU(int n) {
            parent = new int[n];
            for (int i = 0; i < n; i++)
                parent[i] = i;
        }

        int find(int x) {
            if (parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        void union(int x, int y) {
            parent[find(x)] = find(y);
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int result = -1, resultCount = Integer.MAX_VALUE;
        Arrays.sort(initial);
        for (int node : initial) {
            DSU dsu = new DSU(n);
            for (int i = 0; i < n; i++) {
                if (i == node)
                    continue;
                for (int j = 0; j < graph[i].length; j++)
                    if (j != node && graph[i][j] == 1)
                        dsu.union(i, j);
            }
            Map<Integer, Integer> unionRanks = new HashMap<>();
            for (int i = 0; i < n; i++) {
                int p = dsu.find(i);
                unionRanks.put(p, 1 + (unionRanks.getOrDefault(p, 0)));
            }

            Set<Integer> visitedAffectedSets = new HashSet<>();
            int current = 0;
            for (int affected : initial) {
                if (affected == node) continue;
                int p = dsu.find(affected);
                if (visitedAffectedSets.contains(p)) continue;
                current += unionRanks.get(p);
                visitedAffectedSets.add(p);
            }
            if (current < resultCount) {
                result = node;
                resultCount = current;
            }
        }
        return result;
    }
}
