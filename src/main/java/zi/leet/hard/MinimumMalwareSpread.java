package zi.leet.hard;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

//https://leetcode.com/problems/minimize-malware-spread
public class MinimumMalwareSpread {
    class DSU {
        int[] parent;

        DSU(int n) {
            parent = new int[n];
            for (int i = 0; i < n; i++) parent[i] = i;
        }

        int find(int x) {
            if (parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        void union(int x, int y) {
            parent[find(x)] = find(y);
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DSU dsu = new DSU(n);
        for (int i = 0; i < n; i++)
            for (int j = 0; j < graph[i].length; j++)
                if (graph[i][j] == 1)
                    dsu.union(i, j);
        Map<Integer, Integer> unionRanks = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int p = dsu.find(i);
            unionRanks.put(p, 1 + (unionRanks.getOrDefault(p, 0)));
        }

        Map<Integer, Set<Integer>> affectedRanks = new HashMap<>();
        int minInitial = Integer.MAX_VALUE;
        for (int affected : initial) {
            minInitial = Math.min(minInitial, affected);

            int p = dsu.find(affected);
            Set<Integer> affectedSet = affectedRanks.getOrDefault(p, new HashSet<>());
            affectedSet.add(affected);
            affectedRanks.put(p, affectedSet);
        }
        int result = -1, resultCount = Integer.MIN_VALUE;
        for (Map.Entry<Integer, Set<Integer>> entry : affectedRanks.entrySet()) {
            if (entry.getValue().size() == 1 && unionRanks.get(entry.getKey()) > resultCount) {
                result = entry.getValue().iterator().next();
                resultCount = unionRanks.get(entry.getKey());
            }
        }
        return result != -1 ? result : minInitial;
    }
}
